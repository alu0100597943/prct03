18: - puts 'Hola Mundo' -
Al ponerlo entre comillas simples (''), da un error de sintaxis ya que no reconoce los espacios en blanco.
Si se pusiera entre comillas dobles ("") no daría ningín error.

21: - '\t\n' y "\t\n" -
La diferencia se encuentra en que las comillas simples imprimen literalmente el contenido encapsulado y las comillas dobles interpretan que son comandos de tabulación y retorno de carro.

22: - %q -
%q no realiza interpolación de cadenas.

23: - %Q -
%Q realiza la interpolación de cadenas.

24: - Que queda en C -
--4--
--2--

25: - Que queda en C -
--\#{a}--\n--\#{b}--\n

26: - s = "hello"
s[0,2] => "he"
s[-1,1] => "o"
s[0,10] => "hello"

27: - << -
Concatena las cadenas: g = "hello world"

28: - '.'*3
'...'

29: - "#{a=a+1}"*3 - 
suma uno a 'a' y lo repite 3 veces
'222'

30: - %w[this is a test] -
crea un vector de palabras
["this", "is", "a", "test"]

31: - %w[\t \n] - 
"["\\t", "\\n"]"

32: - %W[\t \n] - 
"["\t", "\n"]

33: - nils = Array.new(3) - 
Un array de 3 objetos nil.

34: - zeros = Array.new(3,0) -
Un array de 3 objetos inicializados a 0

35: - b = Array.new(x) -
Te crea una copia de x en b

36: - c = Array.new(3){|i| 2*i} -
Crea un array de 3 objetos inicializados de la siguiente manera: [0,2,4]

37: - Conjunto de operaciones - 
> a = ('a'..'e').to_a
=> ["a", "b", "c", "d", "e"]
> a[1,1]
=> ["b"]
> a[-2,2]
=> ["d", "e"]
> a[0..2]
=> ["a", "b", "c"]
> a[0..1]
=> ["a", "b"]
> a[-2..-1]
=> ["d", "e"]

38: - Conjunto de operaciones -
> a
=> ["a", "b", "c", "d", "e"]
> a[0,2] = %w{A,B}
=> ["A,B"]
> a
=> ["A,B", "c", "d", "e"]
> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
> a
=> ["A,B", "c", "C", "D", "E"]
> a[0,0] = [1,2,3]
=> [1, 2, 3]
> a
=> [1, 2, 3, "A,B", "c", "C", "D", "E"]
> a[0,2] = []
=> []
> a
=> [3, "A,B", "c", "C", "D", "E"]
> a
=> ["a", "b", "c", "d", "e"]
> a[0,2] = %w{A,B}
=> ["A,B"]
> a
=> ["A,B", "c", "d", "e"]
> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
> a
=> ["A,B", "c", "C", "D", "E"]
> a[0,0] = [1,2,3]
=> [1, 2, 3]
> a
=> [1, 2, 3, "A,B", "c", "C", "D", "E"]
> a[0,2] = []
=> []
> a
=> [3, "A,B", "c", "C", "D", "E"]


39: - Conjunto de operaciones -
> a = (1..4).to_a
=> [1, 2, 3, 4]
> a = a + [4,5]
=> [1, 2, 3, 4, 4, 5]
> a += [[6,7,8]]
=> [1, 2, 3, 4, 4, 5, [6, 7, 8]]
> a = a +9
No se puede convertir un numero fijo en un array

40: - Conjunto de operaciones -
> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"]
> x = x - %w{b c b}
=> ["a", "a"]

41: - Conjunto de operaciones -
> z = [0]+8
No se puede convertir un numero fijo en un array

42: - Conjunto de operaciones -
> a = []
=> []
> a << 1
=> [1]
> a << 2 << 3
=> [1, 2, 3]
> a << [4,5,6]
=> [1, 2, 3, [4, 5, 6]]
> a.concat [7,8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43: - Conjunto de operaciones - 
> a = [1,1,2,2,3,3,4]
=> [1, 1, 2, 2, 3, 3, 4]
> b = [5,5,4,4,3,3,2]
=> [5, 5, 4, 4, 3, 3, 2]
> c = a|b
=> [1, 2, 3, 4, 5]
> d = b|a
=> [5, 4, 3, 2, 1]
> e = a&b
=> [2, 3, 4]
> f = b&a
=> [4, 3, 2]

44: - Conjunto de operaciones - 
> a = 1..10
=> 1..10
> a.class
=> Range
> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
> b = 1...10
=> 1...10
> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
> b.include? 10
=> false
> b.include? 8
=> true
> b.step(2){|x|print"#{x} "}
1 3 5 7 9 => 1...10
> 1..3.to_a
La funcion to_a no está definida para 1..3

45: - Conjunto de operaciones -
> r = 0..100
=> 0..100
> r.member? 50
=> true
> r.include? 99.9
=> true
> r.member? 99.9
=> true

46: - Conjunto de operaciones -
> true.class
=> TrueClass
> false.class
=> FalseClass
> puts "hello" if 0
hello
=> nil
> puts "hello" if nil
=> nil
> puts "hello" if ""
advierte de que existe un literal en la comparacion aunque muestra:
hello
=> nil

47: -Conjunto de operaciones -
> x = :sym
=> :sym
> x.class
=> Symbol
> x == 'sym'
=> false
> x == :sym
=> true
> z = :'a long symbol'
=> :"a long symbol"
> z.class
=> Symbol
> x == 'sym'.to_sym
=> true
> x.to_s == 'sym'
=> true

48: - Conjunto de operaciones -
> s = "Ruby"
=> "Ruby"
> t = s
=> "Ruby"
> t[-1] = ""
=> ""
> print s
Rub=> nil #Se elimina la última letra
 t = "Java"
=> "Java"
> print s,t
RubJava=> nil #Al imprimir t, no se lleva la última letra porque hemos hecho un t[-1] = ""

49: - Conjunto de operaciones - 
> "%d %s" % [3,"rubies"]
=> "3 rubies"
Es una manera de formatear la salida

50: - Conjunto de operaciones -
> x, y = 4, 5
=> [4, 5]
> z = x > y ? x : y #Si x > y z = x sino z = y
=> 5
> x,y,z = [1,2,3]
=> [1, 2, 3]

51: - Conjunto de operaciones - 
> x = { :a => 1 , :b => 2 }
=> {:a=>1, :b=>2}
> x.keys
=> [:a, :b]
> x.values
=> [1, 2]
> x[:c] = 3
=> 3
> x
=> {:a=>1, :b=>2, :c=>3}
> x.delete('a') #No puede eliminar porque no existe este elemento
=> nil
> x.delete(:a) #Se refiere al symbolo :a por eso si lo elimina
=> 1
> x
=> {:b=>2, :c=>3}
> x = {:a => 1, :b=>2, :c=>4}
=> {:a=>1, :b=>2, :c=>4}
> x.delete_if{|k,v| v%2 == 0} #Elimina si es multiplo de 2
=> {:a=>1}
> x
=> {:a=>1}

52: - qué hace yield 4, 5 - 
llama a un bloque y le pasa los parámetros 4 y 5

53: - Hash.new(0) ; {} - 
Hash.new(0) crea un nuevo hash vacío. No se diferencia con {} en nada, ambos crean un hash vacío.

54: - 'hello world, hello LPP'.scan /\w+/ -
Escanea la cadena y crea un array con cada una de las palabras que aparecen 
=> ["hello", "world", "hello", "LPP"]

55: - Explicar que hace estas instrucciones - 
> c = {:a=>3,:b=>2,:c=>1}
=> {:a=>3, :b=>2, :c=>1}
> c.keys.sort.each{|k| puts c[k]}
3
2
1
=> [:a, :b, :c]

La primera crea un hash con tres símbolos.
La segunda muestra los valores ordenados.

